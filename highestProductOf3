// let array = [-10,-10,1,2,3]

function highestProductOf3(array){
  if (array.length < 3) throw new Error('Less than 3 numbers')
  let firstPos;
  let secondPos;
  let thirdPos;
  let firstNeg;
  let secondNeg;
  
  for(let i = 0; i < array.length; i++){
    if (true){
      if (array[i] > firstPos || !firstPos){
        thirdPos = secondPos;
        secondPos = firstPos;
        firstPos = array[i]
      }
      else if (array[i] > secondPos || !secondPos){
        thirdPos = secondPos
        secondPos = array[i]
      }
      else if (array[i] > thirdPos || !thirdPos){
        thirdPos = array[i]
      }
    }
    
    if(true){
      if (array[i] < firstNeg || !firstNeg){
        secondNeg = firstNeg
        firstNeg = array[i]
      }
      else if (array[i] < secondNeg || !secondNeg){
        secondNeg = array[i]
      }
    }
  }
  return Math.max((firstPos * secondPos * thirdPos), (firstPos * firstNeg* secondNeg))
}

// Tests





let desc = 'short array';
let actual = highestProductOf3([1, 2, 3, 4]);
let expected = 24;
assertEqual(actual, expected, desc);

desc = 'longer array';
actual = highestProductOf3([6, 1, 3, 5, 7, 8, 2]);
expected = 336;
assertEqual(actual, expected, desc);

desc = 'array has one negative';
actual = highestProductOf3([-5, 4, 8, 2, 3]);
expected = 96;
assertEqual(actual, expected, desc);

desc = 'array has two negatives';
actual = highestProductOf3([-10, 1, 3, 2, -10]);
expected = 300;
assertEqual(actual, expected, desc);

desc = 'array is all negatives';
actual = highestProductOf3([-5, -1, -3, -2]);
expected = -6;
assertEqual(actual, expected, desc);

desc = 'error with empty array';
const emptyArray = () => (highestProductOf3([]));
assertThrowsError(emptyArray, desc);

desc = 'error with one number';
const oneNumber = () => (highestProductOf3([1]));
assertThrowsError(emptyArray, desc);

desc = 'error with two numbers';
const twoNumber = () => (highestProductOf3([1, 1]));
assertThrowsError(twoNumber, desc);

function assertEqual(a, b, desc) {
  if (a === b) {
    console.log(`${desc} ... PASS`);
  } else {
    console.log(`${desc} ... FAIL: ${a} != ${b}`)
  }
}

function assertThrowsError(func, desc) {
  try {
    func();
    console.log(`${desc} ... FAIL`);
  } catch (e) {
    console.log(`${desc} ... PASS`);
  }
}
